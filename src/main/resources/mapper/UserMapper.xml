<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.travelcommunity.mapper.UserMapper">

    <!-- 회원 등록 -->
    <insert id="insertUser" parameterType="com.example.travelcommunity.entity.User">
        INSERT INTO users (
            username,
            email,
            password,
            phone_number,
            date_of_birth,
            gender,
            country,
            preferred_language,
            travel_interests
        ) VALUES (
                     #{username},
                     #{email},
                     #{password},
                     #{phoneNumber},
                     #{dateOfBirth},
                     #{gender},
                     #{country},
                     #{preferredLanguage},
                     #{travelInterests}
                 )
    </insert>

    <!-- ID로 회원 조회 -->
    <select id="findById" parameterType="long" resultType="com.example.travelcommunity.entity.User">
        SELECT * FROM users WHERE user_id = #{userId}
    </select>

    <!-- 사용자 이름으로 조회 -->
    <select id="findByUsername" parameterType="string" resultType="com.example.travelcommunity.entity.User">
        SELECT * FROM users WHERE username = #{username}
    </select>

    <!-- 회원 정보 수정 -->
    <update id="updateUser" parameterType="com.example.travelcommunity.entity.User">
        UPDATE users
        SET email = #{email},
            password = #{password},
            profile_image = #{profileImage},
            biography = #{biography},
            role = #{role},
            phone_number = #{phoneNumber},
            email_verified = #{emailVerified},
            date_of_birth = #{dateOfBirth},
            gender = #{gender},
            country = #{country},
            preferred_language = #{preferredLanguage},
            travel_interests = #{travelInterests},
            grade = #{grade},
            profile_visibility = #{profileVisibility},
            is_deleted = #{isDeleted},
            updated_at = NOW()
        WHERE user_id = #{userId}
    </update>

    <!-- 회원 삭제 -->
    <delete id="deleteUser" parameterType="long">
        UPDATE users
        SET is_deleted = 'Y', deleted_at = NOW()
        WHERE user_id = #{userId}
    </delete>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultType="com.example.travelcommunity.entity.User">
        SELECT * FROM users WHERE email = #{email}
    </select>

</mapper>
