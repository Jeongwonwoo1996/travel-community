<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.travelcommunity.mapper.PostMapper">

    <!-- 게시글 생성 -->
    <insert id="insertPost" parameterType="com.example.travelcommunity.entity.Post" useGeneratedKeys="true" keyProperty="postId">
        INSERT INTO posts (
            user_id,
            category_id,
            title,
            content,
            thumbnail_image,
            created_by
        ) VALUES (
                     #{userId},
                     #{categoryId},
                     #{title},
                     #{content},
                     #{thumbnailImage},
                     #{createdBy}
                 )
    </insert>

    <!-- 게시글 상세 조회 -->
    <select id="selectPostById" parameterType="long" resultMap="postResultMap">
        SELECT p.post_id,
               p.title,
               p.content,
               p.created_at,
               p.likes_count,
               p.views_count,
               c.name AS category_name,
               u.user_id,
               u.username AS author
        FROM posts p
                 JOIN users u ON p.user_id = u.user_id
                 LEFT JOIN categories c ON p.category_id = c.category_id
        WHERE p.post_id = #{postId}
    </select>

    <!-- 게시글 삭제 -->
    <delete id="deletePostById" parameterType="long">
        DELETE FROM posts WHERE post_id = #{postId}
    </delete>

    <!-- 게시글 목록 조회 -->
    <select id="selectAllPosts" resultMap="postResultMap">
        SELECT p.post_id,
               p.title,
               p.created_at,
               p.likes_count,
               p.views_count,
               c.name AS category_name,
               u.user_id,
               u.username AS author
        FROM posts p
                 JOIN users u ON p.user_id = u.user_id
                 LEFT JOIN categories c ON p.category_id = c.category_id
        ORDER BY p.created_at DESC
    </select>

    <update id="updatePost" parameterType="com.example.travelcommunity.entity.Post">
        UPDATE posts
        SET title = #{title},
            content = #{content},
            updated_at = NOW()
        WHERE post_id = #{postId}
    </update>

    <resultMap id="postResultMap" type="com.example.travelcommunity.entity.Post">
        <id column="post_id" property="postId" />
        <result column="title" property="title" />
        <result column="created_at" property="createdAt" />
        <result column="likes_count" property="likesCount" />
        <result column="views_count" property="viewsCount" />
        <result column="category_name" property="categoryName" />
        <result column="author" property="author" />
    </resultMap>

    <select id="selectPostsWithPaging" parameterType="map" resultMap="postResultMap">
        SELECT p.post_id, p.title, p.category_id, c.name AS category_name, p.likes_count, p.views_count,
               u.username AS author, p.created_at
        FROM posts p
                 LEFT JOIN categories c ON p.category_id = c.category_id
                 LEFT JOIN users u ON p.user_id = u.user_id
        ORDER BY p.created_at DESC
            LIMIT #{pageSize} OFFSET #{offset}
    </select>

    <select id="countAllPosts" resultType="int">
        SELECT COUNT(*) FROM posts
    </select>

    <update id="incrementViewCount" parameterType="long">
        UPDATE posts
        SET views_count = views_count + 1
        WHERE post_id = #{postId}
    </update>
</mapper>
